{"meta":{"generator":"0.7.4","format":19,"date":1506353736894},"custom":null,"classes":[{"name":"RPCClient","description":"The main hub for interacting with Discord RPC","extends":["BaseClient"],"construct":{"name":"RPCClient","params":[{"name":"options","description":"Options for the client\nYou must provide a transport","optional":true,"type":[[["RPCClientOptions"]]]}]},"props":[{"name":"application","description":"Application used in this client","nullable":true,"type":[[["ClientApplication"]]],"meta":{"line":50,"file":"Client.js","path":"src"}},{"name":"user","description":"User used in this application","nullable":true,"type":[[["User"]]],"meta":{"line":56,"file":"Client.js","path":"src"}},{"name":"transport","description":"Raw transport userd","type":[[["RPCTransport"]]],"meta":{"line":67,"file":"Client.js","path":"src"}},{"name":"_expecting","description":"Map of nonces being expected from the transport","access":"private","type":[[["Map"]]],"meta":{"line":75,"file":"Client.js","path":"src"}},{"name":"_subscriptions","description":"Map of current subscriptions","access":"private","type":[[["Map"]]],"meta":{"line":82,"file":"Client.js","path":"src"}}],"methods":[{"name":"login","description":"Log in","examples":["client.login('1234567', { clientSecret: 'abcdef123' });"],"params":[{"name":"clientID","description":"Client ID","type":[[["string"]]]},{"name":"options","description":"Options for authentication. You must provide at least one of the props to log in.","type":[[["RPCLoginOptions"]]]}],"returns":[[["Promise","<"],["RPCClient",">"]]],"meta":{"line":105,"file":"Client.js","path":"src"}},{"name":"request","description":"Request","access":"private","params":[{"name":"cmd","description":"Command","type":[[["string"]]]},{"name":"args","description":"Arguments","optional":true,"default":"{}","type":[[["Object"]]]},{"name":"evt","description":"Event","optional":true,"type":[[["string"]]]}],"returns":[[["Promise"]]],"meta":{"line":131,"file":"Client.js","path":"src"}},{"name":"_onRpcMessage","description":"Message handler","access":"private","params":[{"name":"message","description":"message","type":[[["Object"]]]}],"meta":{"line":144,"file":"Client.js","path":"src"}},{"name":"authorize","description":"Authorize","access":"private","params":[{"name":"options","description":"options","type":[[["Object"]]]}],"returns":[[["Promise"]]],"meta":{"line":164,"file":"Client.js","path":"src"}},{"name":"authenticate","description":"Authenticate","access":"private","params":[{"name":"accessToken","description":"access token","type":[[["string"]]]}],"returns":[[["Promise"]]],"meta":{"line":206,"file":"Client.js","path":"src"}},{"name":"getGuild","description":"Fetch a guild","params":[{"name":"id","description":"Guild ID","type":[[["Snowflake"]]]},{"name":"timeout","description":"Timeout request","optional":true,"type":[[["number"]]]}],"returns":[[["Promise","<"],["Guild",">"]]],"meta":{"line":224,"file":"Client.js","path":"src"}},{"name":"getGuilds","description":"Fetch all guilds","params":[{"name":"timeout","description":"Timeout request","optional":true,"type":[[["number"]]]}],"returns":[[["Promise","<"],["Collection","<"],["Snowflake",", "],["Guild",">>"]]],"meta":{"line":234,"file":"Client.js","path":"src"}},{"name":"getChannel","description":"Get a channel","params":[{"name":"id","description":"Channel id","type":[[["Snowflake"]]]},{"name":"timeout","description":"Timeout request","optional":true,"type":[[["number"]]]}],"returns":[[["Promise","<"],["Channel",">"]]],"meta":{"line":249,"file":"Client.js","path":"src"}},{"name":"getChannels","description":"Get all channels","params":[{"name":"timeout","description":"Timeout request","optional":true,"type":[[["number"]]]}],"returns":[[["Promise","<"],["Collection","<"],["Snowflake",", "],["Channel",">>"]]],"meta":{"line":264,"file":"Client.js","path":"src"}},{"name":"setUserVoiceSettings","description":"Set the voice settings for a uer, by id","params":[{"name":"id","description":"ID of the user to set","type":[[["Snowflake"]]]},{"name":"settings","description":"Settings","type":[[["UserVoiceSettings"]]]}],"returns":[[["Promise"]]],"meta":{"line":293,"file":"Client.js","path":"src"}},{"name":"selectVoiceChannel","description":"Move the user to a voice channel","params":[{"name":"id","description":"ID of the voice channel","type":[[["Snowflake"]]]},{"name":"options","description":"Options","optional":true,"type":[[["Object"]]]},{"name":"options.timeout","description":"Timeout for the command","optional":true,"type":[[["number"]]]},{"name":"options.force","description":"Force the move, should only be done if you have explicit permission from the user.","optional":true,"type":[[["boolean"]]]}],"returns":[[["Promise"]]],"meta":{"line":310,"file":"Client.js","path":"src"}},{"name":"selectTextChannel","description":"Move the user to a text channel","params":[{"name":"id","description":"ID of the voice channel","type":[[["Snowflake"]]]},{"name":"options","description":"Options","optional":true,"type":[[["Object"]]]},{"name":"options.timeout","description":"Timeout for the command","optional":true,"type":[[["number"]]]},{"name":"options.force","description":"Force the move, should only be done if you have explicit permission from the user.","optional":true,"type":[[["boolean"]]]}],"returns":[[["Promise"]]],"meta":{"line":322,"file":"Client.js","path":"src"}},{"name":"getVoiceSettings","description":"Get current voice settings","returns":[[["Promise"]]],"meta":{"line":330,"file":"Client.js","path":"src"}},{"name":"setVoiceSettings","description":"Set current voice settings, overriding the current settings until this session disconnects. Also locks the settings\nfor any other rpc sessions which may be connected","params":[{"name":"args","description":"Settings","type":[[["Object"]]]}],"returns":[[["Promise"]]],"meta":{"line":369,"file":"Client.js","path":"src"}},{"name":"captureShortcut","description":"Capture a shortcut using the client\nThe callback takes (key, stop) where `stop` is a function that will stop capturing.\nThis `stop` function must be called before disconnecting or else the user will have\nto restart their client.","params":[{"name":"callback","description":"Callback handling keys","type":[[["function"]]]}],"returns":[[["Promise","<"],["function","()>"]]],"meta":{"line":407,"file":"Client.js","path":"src"}},{"name":"subscribe","description":"Subscribe to an event","params":[{"name":"event","description":"Name of event e.g. `MESSAGE_CREATE`","type":[[["string"]]]},{"name":"args","description":"Args for event e.g. `{ channel_id: '1234' }`","optional":true,"type":[[["Object"]]]},{"name":"callback","description":"Callback when an event for the subscription is triggered","type":[[["function"]]]}],"returns":[[["Promise","<"],["Object",">"]]],"meta":{"line":447,"file":"Client.js","path":"src"}},{"name":"destroy","description":"Destroy the client","meta":{"line":465,"file":"Client.js","path":"src"}}],"meta":{"line":36,"file":"Client.js","path":"src"}}],"interfaces":[],"typedefs":[{"name":"createCache","type":[[["RPCClientOptions"]]],"props":[{"name":"transport","description":"RPC transport. one of `ipc` or `websocket`","type":[[["string"]]]}],"meta":{"line":23,"file":"Client.js","path":"src"}}],"externals":[]}
