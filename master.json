{"meta":{"generator":"0.7.4","format":19,"date":1510670765275},"custom":{"general":{"name":"General","files":{"README":{"name":"Welcome","type":"md","content":"<div align=\"center\">\n  <br />\n  <p>\n    <a href=\"https://discord.gg/bRCvFy9\"><img src=\"https://discordapp.com/api/guilds/222078108977594368/embed.png\" alt=\"Discord server\" /></a>\n    <a href=\"https://www.npmjs.com/package/discord-rpc\"><img src=\"https://img.shields.io/npm/v/discord-rpc.svg?maxAge=3600\" alt=\"NPM version\" /></a>\n    <a href=\"https://www.npmjs.com/package/discord-rpc\"><img src=\"https://img.shields.io/npm/dt/discord-rpc.svg?maxAge=3600\" alt=\"NPM downloads\" /></a>\n    <a href=\"https://david-dm.org/devsnek/discord-rpc\"><img src=\"https://img.shields.io/david/devsnek/discord-rpc.svg?maxAge=3600\" alt=\"Dependencies\" /></a>\n    <a href=\"https://www.patreon.com/devsnek\"><img src=\"https://img.shields.io/badge/donate-patreon-F96854.svg\" alt=\"Patreon\" /></a>\n  </p>\n  <p>\n    <a href=\"https://nodei.co/npm/discord-rpc/\"><img src=\"https://nodei.co/npm/discord-rpc.png?downloads=true&stars=true\" alt=\"NPM info\" /></a>\n  </p>\n</div>\n\n# Discord RPC Client\n\n#### Official RPC extension for [Discord.js](https://discord.js.org), and all types used in this library are from Discord.js\n\n### Rich Presence Example\n```javascript\nconst { Client } = require('discord-rpc');\n\n// Rich Presence only works with IPC, and so it won't work in browser\nconst client = new Client({ transport: 'ipc' });\n\nclient.on('ready', () => {\n  // based on the object from\n  // https://github.com/discordapp/discord-rpc/blob/master/examples/send-presence\n  console.log('Ready, setting rich presence');\n  client.setActivity({\n    state: 'West of House',\n    details: 'Frustration Level: 0',\n    startTimestamp: Date.now(),\n    endTimestamp: Date.now() + (10 * 60e3),\n    largeImageKey: 'canary-large',\n    smallImageKey: 'ptb-small',\n    partyId: 'party1234',\n    partySize: 1,\n    partyMax: 6,\n    matchSecret: 'xyzzy',\n    joinSecret: 'join',\n    spectateSecret: 'look',\n    instance: false,\n  });\n\n  client.subscribe('ACTIVITY_JOIN', ({ secret }) => {\n    console.log('Game Join Request', secret);\n  });\n\n  client.subscribe('ACTIVITY_SPECTATE', ({ secret }) => {\n    console.log('Game Spectate Request', secret);\n  });\n});\n\n// Log in to RPC with only client id; allows only rich presence.\n// If you want to use other features you should see below for an example\n// of authorization with scopes, which will still let you use rich presence\n// if you are using the `ipc` transport.\nclient.login('18712471923871230');\n```\n\n### Browser Example\n```javascript\nconst { Client } = require('discord-rpc');\n\nconst clientID = '187406016902594560';\nconst scopes = ['rpc', 'rpc.api', 'messages.read'];\n\n// This demonstrates discord's implicit oauth2 flow\n// http://discordapi.com/topics/oauth2#implicit-grant\n\nconst params = new URLSearchParams(document.location.hash.slice(1));\n\nif (!params.has('access_token')) {\n  // Redirect to discord to get an access token\n  document.location.href =\n    `https://discordapp.com/oauth2/authorize?response_type=token&client_id=${clientID}&scope=${scopes.join('%20')}`;\n}\n\nconst client = new Client({ transport: 'websocket' });\n\nclient.on('ready', () => {\n  console.log('Logged in as', client.application.name);\n  console.log('Authed for user', client.user.tag);\n});\n\n// Log in to RPC with client id and access token\nclient.login(clientID, { accessToken: params.get('access_token'), scopes });\n```\n","path":"README.md"}}}},"classes":[{"name":"RPCClient","description":"The main hub for interacting with Discord RPC","extends":["BaseClient"],"construct":{"name":"RPCClient","params":[{"name":"options","description":"Options for the client\nYou must provide a transport","optional":true,"type":[[["RPCClientOptions"]]]}]},"props":[{"name":"application","description":"Application used in this client","nullable":true,"type":[[["ClientApplication"]]],"meta":{"line":50,"file":"Client.js","path":"src"}},{"name":"user","description":"User used in this application","nullable":true,"type":[[["User"]]],"meta":{"line":56,"file":"Client.js","path":"src"}},{"name":"transport","description":"Raw transport userd","type":[[["RPCTransport"]]],"meta":{"line":67,"file":"Client.js","path":"src"}},{"name":"_expecting","description":"Map of nonces being expected from the transport","access":"private","type":[[["Map"]]],"meta":{"line":75,"file":"Client.js","path":"src"}},{"name":"_subscriptions","description":"Map of current subscriptions","access":"private","type":[[["Map"]]],"meta":{"line":82,"file":"Client.js","path":"src"}}],"methods":[{"name":"login","description":"Log in","examples":["client.login('1234567', { clientSecret: 'abcdef123' });"],"params":[{"name":"clientID","description":"Client ID","type":[[["string"]]]},{"name":"options","description":"Options for authentication. You must provide at least one of the props to log in.","type":[[["RPCLoginOptions"]]]}],"returns":[[["Promise","<"],["RPCClient",">"]]],"meta":{"line":105,"file":"Client.js","path":"src"}},{"name":"request","description":"Request","access":"private","params":[{"name":"cmd","description":"Command","type":[[["string"]]]},{"name":"args","description":"Arguments","optional":true,"default":"{}","type":[[["Object"]]]},{"name":"evt","description":"Event","optional":true,"type":[[["string"]]]}],"returns":[[["Promise"]]],"meta":{"line":137,"file":"Client.js","path":"src"}},{"name":"_onRpcMessage","description":"Message handler","access":"private","params":[{"name":"message","description":"message","type":[[["Object"]]]}],"meta":{"line":150,"file":"Client.js","path":"src"}},{"name":"authorize","description":"Authorize","access":"private","params":[{"name":"options","description":"options","type":[[["Object"]]]}],"returns":[[["Promise"]]],"meta":{"line":174,"file":"Client.js","path":"src"}},{"name":"authenticate","description":"Authenticate","access":"private","params":[{"name":"accessToken","description":"access token","type":[[["string"]]]}],"returns":[[["Promise"]]],"meta":{"line":218,"file":"Client.js","path":"src"}},{"name":"getGuild","description":"Fetch a guild","params":[{"name":"id","description":"Guild ID","type":[[["Snowflake"]]]},{"name":"timeout","description":"Timeout request","optional":true,"type":[[["number"]]]}],"returns":[[["Promise","<"],["Guild",">"]]],"meta":{"line":236,"file":"Client.js","path":"src"}},{"name":"getGuilds","description":"Fetch all guilds","params":[{"name":"timeout","description":"Timeout request","optional":true,"type":[[["number"]]]}],"returns":[[["Promise","<"],["Collection","<"],["Snowflake",", "],["Guild",">>"]]],"meta":{"line":246,"file":"Client.js","path":"src"}},{"name":"getChannel","description":"Get a channel","params":[{"name":"id","description":"Channel id","type":[[["Snowflake"]]]},{"name":"timeout","description":"Timeout request","optional":true,"type":[[["number"]]]}],"returns":[[["Promise","<"],["Channel",">"]]],"meta":{"line":262,"file":"Client.js","path":"src"}},{"name":"getChannels","description":"Get all channels","params":[{"name":"timeout","description":"Timeout request","optional":true,"type":[[["number"]]]}],"returns":[[["Promise","<"],["Collection","<"],["Snowflake",", "],["Channel",">>"]]],"meta":{"line":277,"file":"Client.js","path":"src"}},{"name":"setUserVoiceSettings","description":"Set the voice settings for a uer, by id","params":[{"name":"id","description":"ID of the user to set","type":[[["Snowflake"]]]},{"name":"settings","description":"Settings","type":[[["UserVoiceSettings"]]]}],"returns":[[["Promise"]]],"meta":{"line":308,"file":"Client.js","path":"src"}},{"name":"selectVoiceChannel","description":"Move the user to a voice channel","params":[{"name":"id","description":"ID of the voice channel","type":[[["Snowflake"]]]},{"name":"options","description":"Options","optional":true,"type":[[["Object"]]]},{"name":"options.timeout","description":"Timeout for the command","optional":true,"type":[[["number"]]]},{"name":"options.force","description":"Force the move, should only be done if you have explicit permission from the user.","optional":true,"type":[[["boolean"]]]}],"returns":[[["Promise"]]],"meta":{"line":325,"file":"Client.js","path":"src"}},{"name":"selectTextChannel","description":"Move the user to a text channel","params":[{"name":"id","description":"ID of the voice channel","type":[[["Snowflake"]]]},{"name":"options","description":"Options","optional":true,"type":[[["Object"]]]},{"name":"options.timeout","description":"Timeout for the command","optional":true,"type":[[["number"]]]},{"name":"options.force","description":"Force the move, should only be done if you have explicit permission from the user.","optional":true,"type":[[["boolean"]]]}],"returns":[[["Promise"]]],"meta":{"line":337,"file":"Client.js","path":"src"}},{"name":"getVoiceSettings","description":"Get current voice settings","returns":[[["Promise"]]],"meta":{"line":345,"file":"Client.js","path":"src"}},{"name":"setVoiceSettings","description":"Set current voice settings, overriding the current settings until this session disconnects. Also locks the settings\nfor any other rpc sessions which may be connected","params":[{"name":"args","description":"Settings","type":[[["Object"]]]}],"returns":[[["Promise"]]],"meta":{"line":384,"file":"Client.js","path":"src"}},{"name":"captureShortcut","description":"Capture a shortcut using the client\nThe callback takes (key, stop) where `stop` is a function that will stop capturing.\nThis `stop` function must be called before disconnecting or else the user will have\nto restart their client.","params":[{"name":"callback","description":"Callback handling keys","type":[[["function"]]]}],"returns":[[["Promise","<"],["function","()>"]]],"meta":{"line":422,"file":"Client.js","path":"src"}},{"name":"subscribe","description":"Subscribe to an event","params":[{"name":"event","description":"Name of event e.g. `MESSAGE_CREATE`","type":[[["string"]]]},{"name":"args","description":"Args for event e.g. `{ channel_id: '1234' }`","optional":true,"type":[[["Object"]]]},{"name":"callback","description":"Callback when an event for the subscription is triggered","type":[[["function"]]]}],"returns":[[["Promise","<"],["Object",">"]]],"meta":{"line":507,"file":"Client.js","path":"src"}},{"name":"destroy","description":"Destroy the client","meta":{"line":525,"file":"Client.js","path":"src"}}],"meta":{"line":36,"file":"Client.js","path":"src"}}],"interfaces":[],"typedefs":[],"externals":[]}